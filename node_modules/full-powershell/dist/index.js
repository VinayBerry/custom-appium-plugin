"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PowerShell = void 0;
var child_process_1 = require("child_process");
var crypto_1 = require("crypto");
var debug_1 = require("debug");
var fs_1 = require("fs");
var os_1 = __importDefault(require("os"));
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var stream_1 = require("stream");
var wrapper_1 = require("./wrapper");
var log = {
    info: (0, debug_1.debug)('fps:info'),
    error: (0, debug_1.debug)('fps:error')
};
function parseStream(stream, format) {
    if (format != null) {
        return JSON.parse(stream);
    }
    else {
        return stream;
    }
}
var SubjectWithPromise = /** @class */ (function (_super) {
    __extends(SubjectWithPromise, _super);
    function SubjectWithPromise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubjectWithPromise.prototype.promise = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, rxjs_1.firstValueFrom)(this)];
            });
        });
    };
    return SubjectWithPromise;
}(rxjs_1.Subject));
var BufferReader = /** @class */ (function (_super) {
    __extends(BufferReader, _super);
    function BufferReader(head, tail) {
        var _this = _super.call(this) || this;
        _this.subject = new rxjs_1.Subject();
        _this.buffer = Buffer.from('');
        _this.head = Buffer.from(head);
        _this.tail = Buffer.from(tail);
        return _this;
    }
    BufferReader.prototype.extract = function () {
        var head_idx = this.buffer.indexOf(this.head);
        var tail_idx = this.buffer.indexOf(this.tail);
        var data = this.buffer.slice(head_idx + this.head.length, tail_idx);
        this.buffer = this.buffer.slice(tail_idx + this.tail.length);
        return data;
    };
    BufferReader.prototype._write = function (chunk, encoding, callback) {
        this.buffer = Buffer.concat([this.buffer, chunk]);
        while (this.buffer.includes(this.tail)) {
            var extracted = this.extract();
            this.subject.next(extracted.toString('utf8'));
        }
        callback();
    };
    return BufferReader;
}(stream_1.Writable));
var PowerShell = /** @class */ (function () {
    function PowerShell(options) {
        this.success$ = new rxjs_1.Subject();
        this.error$ = new rxjs_1.Subject();
        this.warning$ = new rxjs_1.Subject();
        this.verbose$ = new rxjs_1.Subject();
        this.debug$ = new rxjs_1.Subject();
        this.info$ = new rxjs_1.Subject();
        // private err$: Subject<any> = new Subject();
        this.delimit_head = 'F0ZU7Wm1p4'; // random string
        this.delimit_tail = 'AdBmCXEdsB'; // random string
        this.queue = [];
        this.tick$ = new rxjs_1.Subject();
        this.tmp_dir = '';
        /* istanbul ignore next */
        this.exe_path = (os_1.default.platform() === 'win32' ? 'powershell' : 'pwsh');
        this.timeout = 600000; // 10 minutes
        if (!!options)
            this.setOptions(options);
        log.info('[>] new instance');
        log.info('[>] tmp_dir: %s', this.tmp_dir);
        log.info('[>] exe_path: %s', this.exe_path);
        log.info('[>] timeout: %s', this.timeout);
        var prefix = (0, crypto_1.randomBytes)(8).toString('hex');
        this.out_verbose = "".concat(this.tmp_dir).concat(prefix, "_fps_verbose.tmp");
        this.out_debug = "".concat(this.tmp_dir).concat(prefix, "_fps_debug.tmp");
        this.init();
    }
    PowerShell.prototype.setOptions = function (options) {
        if (options.tmp_dir)
            this.tmp_dir = options.tmp_dir;
        if (options.exe_path)
            this.exe_path = options.exe_path;
        if (options.timeout)
            this.timeout = options.timeout;
    };
    PowerShell.prototype.init = function () {
        log.info('[>] init');
        this.initProcess();
        this.initReaders();
        this.initQueue();
    };
    PowerShell.prototype.initProcess = function () {
        var _this = this;
        log.info('[>] init process');
        var args = ['-NoLogo', '-NoExit', '-Command', '-'];
        this.powershell = (0, child_process_1.spawn)(this.exe_path, args, { stdio: 'pipe' });
        log.info('[>] pid: %s', this.powershell.pid);
        this.powershell.on('exit', function () {
            log.info('[>] child process emitted exit event');
            if (!_this.powershell.killed) {
                log.info('[>] child process exited itself');
            }
            _this.removeTempFile(_this.out_verbose);
            _this.removeTempFile(_this.out_debug);
        });
        this.powershell.stdin.setDefaultEncoding('utf8');
        this.powershell.stdout.setEncoding('utf8');
        this.powershell.stderr.setEncoding('utf8');
        this.stdin = this.powershell.stdin;
        this.stdout = this.powershell.stdout;
        this.stderr = this.powershell.stderr;
    };
    PowerShell.prototype.initReaders = function () {
        var _this = this;
        log.info('[>] init readers');
        var read_out = new BufferReader(this.delimit_head, this.delimit_tail);
        var read_err = new BufferReader(this.delimit_head, this.delimit_tail);
        this.stdout.pipe(read_out);
        this.stderr.pipe(read_err);
        this.out$ = read_out.subject.pipe((0, operators_1.map)(function (res) {
            var result = JSON.parse(res).result;
            var success = parseStream(result.success, result.format);
            var error = parseStream(result.error, 'json');
            var warning = parseStream(result.warning, 'json');
            var verbose = parseStream(result.verbose, 'string');
            var debug = parseStream(result.debug, 'string');
            var info = parseStream(result.info, 'json');
            if (success.length > 0)
                _this.success$.next(success);
            if (error.length > 0)
                _this.error$.next(error);
            if (warning.length > 0)
                _this.warning$.next(warning);
            if (verbose.length > 0)
                _this.verbose$.next(verbose);
            if (debug.length > 0)
                _this.debug$.next(debug);
            if (info.length > 0)
                _this.info$.next(info);
            return {
                success: success,
                error: error,
                warning: warning,
                verbose: verbose,
                debug: debug,
                info: info,
            };
        }));
    };
    PowerShell.prototype.initQueue = function () {
        var _this = this;
        log.info('[>] init queue');
        // invokes a command
        // enforces timeout
        // errors calling subject
        var invoke = function (command) {
            log.info('[>] invoking: %s', command.command);
            _this.stdin.write(Buffer.from(command.wrapped));
            return _this.out$.pipe((0, operators_1.take)(1), (0, operators_1.timeout)(_this.timeout), (0, operators_1.map)(function (result) { return ({ command: command, result: result }); }), (0, operators_1.catchError)(function (err) {
                log.error('[X] error in pipe: %O', err);
                var error = err;
                if (error.name === 'TimeoutError') {
                    error = new Error("Command timed out after ".concat(_this.timeout, " milliseconds. Check the full-powershell docs for more information."));
                }
                command.subject.error(error);
                throw error;
            }));
        };
        // selects next command from queue
        var handler = function () {
            log.info('[>] %s pending', _this.queue.length);
            return (0, rxjs_1.of)(_this.queue.shift())
                .pipe((0, operators_1.filter)(function (command) { return command !== undefined; }), (0, operators_1.switchMap)(function (command) { return invoke(command); }));
        };
        // subscribes to tick to trigger check for next command
        // concatMaps command handler to enforce order
        var sub = this.tick$.pipe((0, operators_1.tap)(function (_) { return log.info('[>] tick'); }), (0, operators_1.concatMap)(function (_) { return handler(); }))
            .subscribe({
            next: function (_a) {
                var command = _a.command, result = _a.result;
                log.info('[>] complete: %s', command.command);
                command.subject.next(result); // emit from subject returned by call()
                command.subject.complete(); // complete subject returned by call()
                _this.tick$.next(); // check for next command in queue
            },
            error: function (err) {
                log.info('[>] error.......... %O', err);
                sub.unsubscribe(); // clean up this observable chain
                _this.destroy(); // kill old process
                _this.init(); // start a new process
            }
        });
        this.tick$.next();
    };
    PowerShell.prototype.call = function (command, format) {
        var _this = this;
        if (format === void 0) { format = 'json'; }
        log.info('[>] command: %s', command);
        log.info('[>] format: %s', format);
        log.info('[>] pid: %s', this.powershell.pid);
        // subject to be returned form this method
        var subject = new SubjectWithPromise();
        // wrap the command in the serialisation script
        var wrapped = (0, wrapper_1.wrap)(command, this.delimit_head, this.delimit_tail, this.out_verbose, this.out_debug, format);
        // queue the command context
        this.queue.push({
            command: command,
            wrapped: wrapped,
            subject: subject,
            pid: this.powershell.pid || 0
        });
        // attempt to execute the command after this function has returned the subject
        queueMicrotask(function () { return _this.tick$.next(); });
        // return the subject for this command
        return subject;
    };
    PowerShell.prototype.removeTempFile = function (file) {
        if ((0, fs_1.existsSync)(file)) {
            log.info('[>] removing temp file %s', file);
            (0, fs_1.unlinkSync)(file);
            log.info('[>] removed temp file %s', file);
        }
    };
    PowerShell.prototype.destroy = function () {
        log.info('[>] destroy called');
        return this.powershell.kill();
    };
    return PowerShell;
}());
exports.PowerShell = PowerShell;
