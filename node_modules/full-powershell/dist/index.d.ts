import { Subject } from 'rxjs';
import { Format } from './wrapper';
export interface PowerShellStreams {
    success: Array<any>;
    error: Array<any>;
    warning: Array<any>;
    verbose: Array<any>;
    debug: Array<any>;
    info: Array<any>;
}
declare class SubjectWithPromise<T> extends Subject<T> {
    promise(): Promise<T>;
}
interface PowerShellOptions {
    tmp_dir?: string;
    exe_path?: string;
    timeout?: number;
}
export declare class PowerShell {
    success$: Subject<any[]>;
    error$: Subject<any[]>;
    warning$: Subject<any[]>;
    verbose$: Subject<any[]>;
    debug$: Subject<any[]>;
    info$: Subject<any[]>;
    private powershell;
    private stdin;
    private stdout;
    private stderr;
    private out$;
    private delimit_head;
    private delimit_tail;
    private out_verbose;
    private out_debug;
    private queue;
    private tick$;
    private tmp_dir;
    private exe_path;
    private timeout;
    constructor(options?: PowerShellOptions);
    setOptions(options: PowerShellOptions): void;
    private init;
    private initProcess;
    private initReaders;
    private initQueue;
    call(command: string, format?: Format): SubjectWithPromise<PowerShellStreams>;
    private removeTempFile;
    destroy(): boolean;
}
export {};
